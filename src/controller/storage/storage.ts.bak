import { invoke } from "@tauri-apps/api/core"
import { hooks } from "../../services/hook"
import { rcloneInfo } from "../../services/rclone"
import { FileInfo, StorageList, StorageSpace } from "../../type/rclone/rcloneInfo"
import { ParametersType } from "../../type/defaults"
import { rclone_api_post } from "../../utils/rclone/request"
import { alist_api_get, alist_api_post } from "../../utils/alist/request"
import { formatPath } from "../../utils/utils"
import { alistInfo } from "../../services/alist"

//列举存储信息
async function reupStorage() {
    //rclone
    const dump = await rclone_api_post(
        '/config/dump',
    )
    rcloneInfo.storageList = []
    for (const storageName in dump) {
        rcloneInfo.storageList.push({
            framework: 'rclone',
            name: storageName,
            type: dump[storageName].type,
            space: await getStorageSpace(storageName),
            hide: storageName.includes(alistInfo.markInRclone)
        })
    }

    //alist
    const list = (await alist_api_get('/api/admin/storage/list')).data.content as any[]
    for (const storage of list) {
        rcloneInfo.storageList.push({
            framework: 'alist',
            name: storage.mount_path.substring(1),
            type: storage.driver,
            other: {
                alist: {
                    id: storage.id,
                    driverPath: storage.mount_path
                }
            }
        })
    }
    hooks.upStorage()
}

function filterHideStorage(storageList: StorageList[]) {
    let data: any[] = []
    for (let item of storageList) {
        if (!item.hide)
            data.push(item)
    }
    return data
}

//仅rclone
async function getStorageSpace(name: string): Promise<StorageSpace> {

    const back = await rclone_api_post(
        '/operations/about', {
        fs: name + ':'
    }, true)
    if (back && back.total > 0) {
        return { total: Number(back.total), free: Number(back.free), used: Number(back.used) }
    } else {
        return { total: -1, free: -1, used: -1 }
    }
}

//删除存储
async function delStorage(name: string) {
    const storage = searchStorage(name)

    switch (storage?.framework) {
        case 'rclone':
            await rclone_api_post(
                '/config/delete', {
                name: storage.name
            })
            reupStorage()
            break;
        case 'alist':
            await alist_api_post('/api/admin/storage/delete', { id: storage.other?.alist?.id })
            break;
    }
}

//获取存储
async function getStorageParams(name: string): Promise<ParametersType> {
    const storage = searchStorage(name)
    switch (storage?.framework) {
        case 'rclone':
            return await rclone_api_post(
                '/config/get', {
                name: storage?.name
            })
        case 'alist':
            let params = (await alist_api_get(
                '/api/admin/storage/get', {
                id: storage?.other?.alist?.id
            })).data;
            params.addition = JSON.parse(params.addition);
            return params
    }
    return {}
}


//获取文件列表
async function getFileList(storageName: string, path: string): Promise<FileInfo[] | undefined> {
    const storage = searchStorage(storageName)
    let backData
    let fileList: FileInfo[] | undefined = undefined;
    switch (storage?.framework) {
        case 'rclone':
            backData = await rclone_api_post(
                '/operations/list', {
                fs: storage?.name + ':',
                remote: formatPathRclone(path, true)
            })
            if (backData && backData.list) {
                fileList = []
                for (const file of backData.list) {
                    fileList.push({
                        path: formatPath(file.Path, false),
                        name: file.Name,
                        size: file.Size,
                        mimeType: file.MimeType,
                        modTime: new Date(file.ModTime),
                        isDir: file.IsDir,
                    })
                }
            }
            break
        case 'alist':
            fileList = await getFileList(alistInfo.markInRclone, storageName + '/' + path)
        /* backData = await alist_api_post('/api/fs/list', {
            path: formatPath(storage.other?.alist?.driverPath+'/'+path),
            refresh: true
        })
        if (backData && backData.data && backData.data.content) {
            fileList = []
            for (const file of backData.data.content) {
                fileList.push({
                    path: formatPath(path + '/' + file.name, false),
                    name: file.name,
                    size: file.size,
                    modTime: new Date(file.modified),
                    isDir: file.is_dir
                })
            }
        } */
    }
    console.log(fileList);

    return fileList
}

//删除文件
async function delFile(storageName: string, path: string, refreshCallback?: Function) {
    let backData
    const storage = searchStorage(storageName)
    switch (storage?.framework) {
        case 'rclone':
            if (path.substring(0, 1) == '/') {
                path = path.substring(1, path.length)
            }
            backData = await rclone_api_post(
                '/operations/deletefile', {
                fs: storageName + ':',
                remote: formatPathRclone(path, false)
            })

            break;
        case 'alist':
            delFile(alistInfo.markInRclone, storageName + '/' + path)
            break;
    }
    if (refreshCallback) {
        refreshCallback()
    }
}

async function delDir(storageName: string, path: string, refreshCallback?: Function) {
    const storage = searchStorage(storageName)
    switch (storage?.framework) {
        case 'rclone':
            const backData = await rclone_api_post(
                '/operations/purge', {
                fs: storageName + ':',
                remote: formatPathRclone(path, true)
            })
            break;
        case 'alist':
            delDir(alistInfo.markInRclone, storageName + '/' + path)
            break;
    }

    if (refreshCallback) {
        refreshCallback()
    }
}

//创建目录
async function mkDir(storageName: string, path: string, refreshCallback?: Function) {
    const storage = searchStorage(storageName)
    switch (storage?.framework) {
        case 'rclone':
            const backData = await rclone_api_post(
                '/operations/mkdir', {
                fs: storageName + ':',
                remote: formatPathRclone(path, true)
            })

            break;
        case 'alist':
            mkDir(alistInfo.markInRclone, storageName + '/' + path)
            break;
    }
    if (refreshCallback) {
        refreshCallback()
    }

}

function formatPathRclone(path: string, isDir?: boolean): string {
    path = path.replace(/\/+/g, '/');
    if (path.substring(0, 1) === '/') {
        path = path.substring(1, path.length)
    }
    if (isDir) {
        if (path.substring(path.length - 1, path.length) === '/') {
            path = path.substring(0, path.length - 1)
        } else {
            path = path + '/'
        }
    }
    return path;
}

//copyFile
async function copyFile(storageName: string, path: string, destStoragename: string, destPath: string, pathF2f: boolean = false) {//pathF2f:destPath为文件时需要设置为true。(默认false时为文件夹，文件名来自srcPath)
    const storage = searchStorage(storageName)
    const destStorage = searchStorage(storageName)

    const backData = await rclone_api_post(
        '/operations/copyfile', {
        srcFs: storage?.framework === 'rclone' ? storageName + ':' : alistInfo.markInRclone + ':',
        srcRemote: storage?.framework === 'rclone' ? formatPathRclone(path) : formatPathRclone(storageName + '/' + path),
        dstFs: destStorage?.framework === 'rclone' ? destStoragename + ':' : alistInfo.markInRclone + ':',
        dstRemote: destStorage?.framework === 'rclone' ? formatPathRclone(destPath, !pathF2f) + (!pathF2f && getFileName(path)) :
            formatPathRclone(destStoragename + '/' + destPath, !pathF2f) + (!pathF2f && getFileName(path))
    }, true)
}

async function moveFile(storageName: string, path: string, destStoragename: string, destPath: string, newNmae?: string, pathF2f: boolean = false) {
    const storage = searchStorage(storageName)
    const destStorage = searchStorage(storageName)

    const backData = await rclone_api_post(
        '/operations/movefile', {
        srcFs: storage?.framework === 'rclone' ? storageName + ':' : alistInfo.markInRclone + ':',
        srcRemote: storage?.framework === 'rclone' ? formatPathRclone(path) : formatPathRclone(storageName + '/' + path),
        dstFs: destStorage?.framework === 'rclone' ? destStoragename + ':' : alistInfo.markInRclone + ':',
        dstRemote: destStorage?.framework === 'rclone' ? formatPathRclone(destPath, !pathF2f) + (!pathF2f && newNmae ? newNmae : getFileName(path)) :
            formatPathRclone(destStoragename + '/' + destPath, !pathF2f) + (!pathF2f && newNmae ? newNmae : getFileName(path))
    }, true)
}

function getFileName(path: string): string {
    const pathArr = path.split('/')
    return pathArr[pathArr.length - 1]
}

//copyDir
async function copyDir(storageName: string, path: string, destStoragename: string, destPath: string) {
    const storage = searchStorage(storageName)
    const destStorage = searchStorage(storageName)

    const backData = await rclone_api_post(
        '/sync/copy', {
        srcFs: storage?.framework === 'rclone' ? (storageName + ':' + formatPathRclone(path, true)) : (alistInfo.markInRclone + ':' + formatPathRclone(storageName + '/' + path, true)),
        dstFs: destStorage?.framework === 'rclone' ? (destStoragename + ':' + formatPathRclone(destPath, true)) : (alistInfo.markInRclone + ':' + formatPathRclone(destStoragename + '/' + destPath, true)) + getFileName(path)
    }, true)
}

async function moveDir(storageName: string, path: string, destStoragename: string, destPath: string, newName?: string) {
    const storage = searchStorage(storageName)
    const destStorage = searchStorage(storageName)

    const backData = await rclone_api_post(
        '/sync/move', {
        srcFs: storage?.framework === 'rclone' ? (storageName + ':' + formatPathRclone(path, true)) : (alistInfo.markInRclone + ':' + formatPathRclone(storageName + '/' + path, true)),
        dstFs: destStorage?.framework === 'rclone' ? (destStoragename + ':' + formatPathRclone(destPath, true)) : (alistInfo.markInRclone + ':' + formatPathRclone(destStoragename + '/' + destPath, true)) + (newName ? newName : getFileName(path))
    }, true)
}

//sync,需完整path(pathF2f)
async function sync(storageName: string, path: string, destStoragename: string, destPath: string, bisync?: boolean) {//bisync:双向同步
    const storage = searchStorage(storageName)
    const destStorage = searchStorage(storageName)

    const backData = await rclone_api_post(
        !bisync ? '/sync/sync' : '/sync/bisync', {
        srcFs: storage?.framework === 'rclone' ? (storageName + ':' + formatPathRclone(path, true)) : (alistInfo.markInRclone + ':' + formatPathRclone(storageName + '/' + path, true)),
        dstFs: destStorage?.framework === 'rclone' ? (destStoragename + ':' + formatPathRclone(destPath, true)) : (alistInfo.markInRclone + ':' + formatPathRclone(destStoragename + '/' + destPath, true))
    }, true)
}

function searchStorage(keyword: string) {
    for (const storage of rcloneInfo.storageList) {
        if (storage.name === keyword || (storage.framework === 'alist' && storage.other?.alist?.driverPath === keyword)) {
            return storage;
        }
    }
}

export { reupStorage, delStorage, getStorageParams, getFileList, delFile, delDir, mkDir, formatPathRclone, copyFile, copyDir, moveFile, moveDir, sync, searchStorage, filterHideStorage }